[{"/home/ravi/Documents/reactProjects/bg-web/src/index.js":"1","/home/ravi/Documents/reactProjects/bg-web/src/App.js":"2","/home/ravi/Documents/reactProjects/bg-web/src/reportWebVitals.js":"3","/home/ravi/Documents/reactProjects/bg-web/src/constants/index.js":"4","/home/ravi/Documents/reactProjects/bg-web/src/containers/BlogContainer/index.js":"5","/home/ravi/Documents/reactProjects/bg-web/src/containers/HomeContainer/index.js":"6","/home/ravi/Documents/reactProjects/bg-web/src/components/Footer/index.js":"7","/home/ravi/Documents/reactProjects/bg-web/src/components/Header/index.js":"8","/home/ravi/Documents/reactProjects/bg-web/src/constants/colors.js":"9","/home/ravi/Documents/reactProjects/bg-web/src/components/RoundBtn/index.js":"10"},{"size":500,"mtime":1607014060414,"results":"11","hashOfConfig":"12"},{"size":702,"mtime":1607090193708,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1607014060414,"results":"14","hashOfConfig":"12"},{"size":155,"mtime":1607119349690,"results":"15","hashOfConfig":"12"},{"size":414,"mtime":1607090256239,"results":"16","hashOfConfig":"12"},{"size":12091,"mtime":1607140074539,"results":"17","hashOfConfig":"12"},{"size":245,"mtime":1607017946628,"results":"18","hashOfConfig":"12"},{"size":832,"mtime":1607140840532,"results":"19","hashOfConfig":"12"},{"size":179,"mtime":1607090540610,"results":"20","hashOfConfig":"12"},{"size":2569,"mtime":1607091317441,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"bcq21s",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"/home/ravi/Documents/reactProjects/bg-web/src/index.js",[],["44","45"],"/home/ravi/Documents/reactProjects/bg-web/src/App.js",[],"/home/ravi/Documents/reactProjects/bg-web/src/reportWebVitals.js",[],"/home/ravi/Documents/reactProjects/bg-web/src/constants/index.js",[],"/home/ravi/Documents/reactProjects/bg-web/src/containers/BlogContainer/index.js",[],"/home/ravi/Documents/reactProjects/bg-web/src/containers/HomeContainer/index.js",["46","47","48","49","50","51","52","53","54"],"/home/ravi/Documents/reactProjects/bg-web/src/components/Footer/index.js",[],"/home/ravi/Documents/reactProjects/bg-web/src/components/Header/index.js",["55"],"/home/ravi/Documents/reactProjects/bg-web/src/constants/colors.js",[],"/home/ravi/Documents/reactProjects/bg-web/src/components/RoundBtn/index.js",["56","57","58"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport COLORS from '../../constants/colors';\nimport './style.scss';\n\nclass RoundBtn extends React.Component {\n    constructor(props) {\n        super(props);\n        const {\n            textColor,\n            bgColor,\n            hoverBgColor,\n            hoverTextColor,\n            outlineColor,\n            outlinePt,\n        } = this.props;\n        this.state = {\n            textColor,\n            bgColor,\n            outlineColor,\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.bgColor !== this.props.bgColor){\n            this.setState({\n                bgColor: this.props.bgColor,\n            })\n        }\n    }\n\n    onMouseEnter = () => {\n        const {\n            hoverTextColor,\n            hoverBgColor,\n        } = this.props;\n        const changed = {};\n        if (hoverBgColor) {\n            changed.bgColor = hoverBgColor;\n        }\n        if (hoverTextColor) {\n            changed.textColor = hoverTextColor;\n        }\n        this.setState(changed);\n    }\n\n    onMouseLeave = () => {\n        const {\n            textColor,\n            bgColor,\n        } = this.props;\n        this.setState({\n            textColor,\n            bgColor,\n        });\n    }\n\n    render() {\n        const {\n            className,\n            children,\n            outlineColor,\n            outlinePt,\n            onClick,\n        } = this.props;\n        const {\n            bgColor,\n            textColor,\n        } = this.state;\n        return (\n            <button\n                onClick={onClick}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n                className={`${className} round-btn`}\n                style={{\n                    backgroundColor: bgColor,\n                    color: textColor,\n                    border: `${outlinePt}px solid ${outlineColor}`\n                }}\n            >\n                {children}\n            </button>\n        )\n    }\n}\n\nRoundBtn.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.any,\n    textColor: PropTypes.string,\n    bgColor: PropTypes.string,\n    hoverBgColor: PropTypes.string,\n    hoverTextColor: PropTypes.string,\n    outlineColor: PropTypes.string,\n    outlinePt: PropTypes.number,\n}\n\nRoundBtn.defaultProps = {\n    className: '',\n    children: null,\n    textColor: COLORS.WHITE,\n    bgColor: COLORS.DARK,\n    hoverBgColor: '',\n    hoverTextColor: '',\n    outlineColor: COLORS.DARK,\n    outlinePt: 0,\n}\n\nexport default RoundBtn;",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":96,"column":25,"nodeType":"65","endLine":96,"endColumn":67},{"ruleId":"63","severity":1,"message":"64","line":147,"column":29,"nodeType":"65","endLine":147,"endColumn":70},{"ruleId":"63","severity":1,"message":"64","line":156,"column":25,"nodeType":"65","endLine":156,"endColumn":171},{"ruleId":"63","severity":1,"message":"64","line":172,"column":37,"nodeType":"65","endLine":172,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":183,"column":37,"nodeType":"65","endLine":183,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":192,"column":37,"nodeType":"65","endLine":192,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":203,"column":37,"nodeType":"65","endLine":203,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":212,"column":37,"nodeType":"65","endLine":212,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":247,"column":33,"nodeType":"65","endLine":247,"endColumn":78},{"ruleId":"63","severity":1,"message":"64","line":23,"column":17,"nodeType":"65","endLine":23,"endColumn":52},{"ruleId":"66","severity":1,"message":"67","line":12,"column":13,"nodeType":"68","messageId":"69","endLine":12,"endColumn":25},{"ruleId":"66","severity":1,"message":"70","line":13,"column":13,"nodeType":"68","messageId":"69","endLine":13,"endColumn":27},{"ruleId":"66","severity":1,"message":"71","line":15,"column":13,"nodeType":"68","messageId":"69","endLine":15,"endColumn":22},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'hoverBgColor' is assigned a value but never used.","Identifier","unusedVar","'hoverTextColor' is assigned a value but never used.","'outlinePt' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]